// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHATEVENT_MOD_PROTO_H_
#define FLATBUFFERS_GENERATED_CHATEVENT_MOD_PROTO_H_

#include "flatbuffers/flatbuffers.h"

#include "uuid_addition.h"
#include "uuid_generated.h"

namespace Mod {
namespace proto {

struct ChatEvent;
struct ChatEventBuilder;
struct ChatEventT;

struct ChatEventT : public flatbuffers::NativeTable {
  typedef ChatEvent TableType;
  mce::UUID from;
  std::string displayName;
  std::string content;
  ChatEventT() {
  }
};

struct ChatEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChatEventT NativeTableType;
  typedef ChatEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FROM = 4,
    VT_DISPLAYNAME = 6,
    VT_CONTENT = 8
  };
  const Mod::proto::UUID *from() const {
    return GetStruct<const Mod::proto::UUID *>(VT_FROM);
  }
  const flatbuffers::String *displayName() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAYNAME);
  }
  const flatbuffers::String *content() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mod::proto::UUID>(verifier, VT_FROM) &&
           VerifyOffset(verifier, VT_DISPLAYNAME) &&
           verifier.VerifyString(displayName()) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyString(content()) &&
           verifier.EndTable();
  }
  ChatEventT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ChatEventT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ChatEvent> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatEventT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ChatEventBuilder {
  typedef ChatEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_from(const Mod::proto::UUID *from) {
    fbb_.AddStruct(ChatEvent::VT_FROM, from);
  }
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) {
    fbb_.AddOffset(ChatEvent::VT_DISPLAYNAME, displayName);
  }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) {
    fbb_.AddOffset(ChatEvent::VT_CONTENT, content);
  }
  explicit ChatEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatEventBuilder &operator=(const ChatEventBuilder &);
  flatbuffers::Offset<ChatEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChatEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChatEvent> CreateChatEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Mod::proto::UUID *from = 0,
    flatbuffers::Offset<flatbuffers::String> displayName = 0,
    flatbuffers::Offset<flatbuffers::String> content = 0) {
  ChatEventBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_displayName(displayName);
  builder_.add_from(from);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChatEvent> CreateChatEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Mod::proto::UUID *from = 0,
    const char *displayName = nullptr,
    const char *content = nullptr) {
  auto displayName__ = displayName ? _fbb.CreateString(displayName) : 0;
  auto content__ = content ? _fbb.CreateString(content) : 0;
  return Mod::proto::CreateChatEvent(
      _fbb,
      from,
      displayName__,
      content__);
}

flatbuffers::Offset<ChatEvent> CreateChatEvent(flatbuffers::FlatBufferBuilder &_fbb, const ChatEventT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ChatEventT *ChatEvent::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Mod::proto::ChatEventT> _o = std::unique_ptr<Mod::proto::ChatEventT>(new ChatEventT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ChatEvent::UnPackTo(ChatEventT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = from(); if (_e) _o->from = flatbuffers::UnPack(*_e); }
  { auto _e = displayName(); if (_e) _o->displayName = _e->str(); }
  { auto _e = content(); if (_e) _o->content = _e->str(); }
}

inline flatbuffers::Offset<ChatEvent> ChatEvent::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ChatEventT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateChatEvent(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ChatEvent> CreateChatEvent(flatbuffers::FlatBufferBuilder &_fbb, const ChatEventT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ChatEventT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _from = flatbuffers::Pack(_o->from);
  auto _displayName = _o->displayName.empty() ? 0 : _fbb.CreateString(_o->displayName);
  auto _content = _o->content.empty() ? 0 : _fbb.CreateString(_o->content);
  return Mod::proto::CreateChatEvent(
      _fbb,
      &_from,
      _displayName,
      _content);
}

}  // namespace proto
}  // namespace Mod

#endif  // FLATBUFFERS_GENERATED_CHATEVENT_MOD_PROTO_H_
